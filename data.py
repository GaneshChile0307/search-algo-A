import numpy as np

from node import Node

### PARIS SUBWAY CONNECTIONS ###
paris_subway = {
    "E1": Node("E1",["E2"]),
    "E2": Node("E2",["E10", "E9", "E1", "E3"]),
    "E3": Node("E3",["E2", "E9", "E13", "E4"]),
    "E4": Node("E4",["E3", "E13", "E8", "E5"]),
    "E5": Node("E5",["E4", "E7", "E6", "E8"]),
    "E6": Node("E6",["E5"]),
    "E7": Node("E7",["E5"]),
    "E8": Node("E8",["E5", "E12", "E9", "E4"]),
    "E9": Node("E9",["E8", "E11", "E2", "E3"]),
    "E10": Node("E10",["E2"]),
    "E11": Node("E11",["E9"]),
    "E12": Node("E12",["E8"]),
    "E13": Node("E13",["E14", "E3", "E4"]),
    "E14": Node("E14",["E13"])
}

### DEFINING g(n) AND h(n) BASED ON GIVEN REAL AND ESTIMATE DISTANCES

# helper function
def make_symmetric_matrix(triangled_matrix):
  xs,ys = np.triu_indices_from(triangled_matrix,k=1)
  triu_elements = triangled_matrix[xs,ys]
  triangled_matrix[ys,xs] = triu_elements
  return triangled_matrix

real_distances = [
  [0,10,0,0,0,0,0,0,0,0,0,0,0,0], #E1
  [0,0,8.5,0,0,0,0,0,10,3.5,0,0,0,0], #E2
  [0,0,0,6.3,0,0,0,0,9.4,0,0,0,18.7,0], #E3
  [0,0,0,0,13,0,0,15.3,0,0,0,0,12.8,0], #E4
  [0,0,0,0,0,3,2.4,30,0,0,0,0,0,0], #E5
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E6
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E7
  [0,0,0,0,0,0,0,0,9.6,0,0,6.4,0,0], #E8
  [0,0,0,0,0,0,0,0,0,0,12.2,0,0,0], #E9
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E10
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E11
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E12
  [0,0,0,0,0,0,0,0,0,0,0,0,0,5.1], #E13
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E14
]

estimate_distances = [
  [0,10,18.5,24.8,36.4,38.8,35.8,25.4,17.6,9.1,16.7,27.3,27.6,29.8], #E1
  [0,0,8.5,14.8,26.6,29.1,26.1,17.3,10,3.5,15.5,20.9,19.1,21.8], #E2
  [0,0,0,6.3,18.2,20.6,17.6,13.6,9.4,10.3,19.5,19.1,12.1,16.6], #E3
  [0,0,0,0,12,14.4,11.5,12.4,12.6,16.7,23.6,18.6,10.6,15.4], #E4
  [0,0,0,0,0,3,2.4,19.4,23.3,28.2,34.2,24.8,14.5,17.9], #E5
  [0,0,0,0,0,0,3.3,22.3,25.7,30.3,36.7,27.6,15.2,18.2], #E6
  [0,0,0,0,0,0,0,20,23,27.3,34.2,25.7,12.4,15.6], #E7
  [0,0,0,0,0,0,0,0,8.2,20.3,16.1,6.4,22.7,27.6], #E8
  [0,0,0,0,0,0,0,0,0,13.5,11.2,10.9,21.2,26.6], #E9
  [0,0,0,0,0,0,0,0,0,0,17.6,24.2,18.7,21.2], #E10
  [0,0,0,0,0,0,0,0,0,0,0,14.2,31.5,35.5], #E11
  [0,0,0,0,0,0,0,0,0,0,0,0,28.8,33.6], #E12
  [0,0,0,0,0,0,0,0,0,0,0,0,0,5.1], #E13
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0], #E14
]

real_matrix = np.array(real_distances)*(1/30)
estimate_matrix = np.array(estimate_distances)*(1/30)

# Symmetric matrix to query costs between stations
real_sym_matrix = make_symmetric_matrix(real_matrix)
estimate_sym_matrix = make_symmetric_matrix(estimate_matrix)